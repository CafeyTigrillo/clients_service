name: Deploy Client-Service

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar JDK y Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Construir el proyecto con Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. Loguearse en DockerHub
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 5. Construir y subir la imagen Docker
      - name: Build and push Docker image
        run: |
          docker build -t richard28/clients-service:latest .
          docker push richard28/clients-service:latest

      # 6. Configurar la instancia EC2
      - name: Setup EC2 environment
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > key.pem
          chmod 400 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            # Instalar Docker Compose si no está instalado
            if ! command -v docker-compose &> /dev/null
            then
              echo "Docker Compose no está instalado. Instalando..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      # 7. Desplegar Client-Service en la instancia EC2
      - name: Deploy Client-Service on EC2
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > key.pem
          chmod 400 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            cd /home/ec2-user/
            
            # Crear o actualizar el archivo docker-compose.yml
            cat << 'DOCKER_COMPOSE' > docker-compose.yml
            version: '3.8'

            services:
              eureka-server:
                image: richard28/eureka-server:latest
                container_name: eureka-server
                ports:
                  - "8761:8761"

              clients-service:
                image: richard28/clients-service:latest
                container_name: clients-service
                depends_on:
                  - eureka-server
                environment:
                  - EUREKA_SERVER_HOST=http://eureka-server:8761/eureka
                  - DB_HOST=database-prueba.cj37eoxikdhd.us-east-1.rds.amazonaws.com
                  - DB_USER=admin
                  - DB_PASS=Kiet1993
                ports:
                  - "8081:8081"
            DOCKER_COMPOSE

            # Ejecutar Docker Compose
            docker-compose pull
            docker-compose up -d
          EOF
